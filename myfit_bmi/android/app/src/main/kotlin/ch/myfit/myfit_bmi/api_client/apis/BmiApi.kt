/**
* BMI API
* No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
*
* OpenAPI spec version: 1.0.0
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package ch.myfit.myfit_bmi.api_client.apis

import ch.myfit.myfit_bmi.api_client.infrastructure.*

class BmiApi(basePath: kotlin.String = "https://myfit-api.managed-network.ch:10443") : ApiClient(basePath) {

    /**
    * 
    * 
    * @param deviceUUID  
    * @return kotlin.Array<kotlin.Any>
    */
    @Suppress("UNCHECKED_CAST")
    fun bmiAllDataGet(deviceUUID: kotlin.String) : kotlin.Array<kotlin.Any> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("deviceUUID" to listOf("$deviceUUID"))
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/bmi/allData",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<kotlin.Any>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<kotlin.Any>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param weight  
    * @param height  
    * @param deviceUUID  
    * @return kotlin.Float
    */
    @Suppress("UNCHECKED_CAST")
    fun bmiCreatePost(weight: kotlin.Float, height: kotlin.Float, deviceUUID: kotlin.String) : kotlin.Float {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("weight" to listOf("$weight"), "height" to listOf("$height"), "deviceUUID" to listOf("$deviceUUID"))
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/bmi/create",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Float>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Float
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * 
    * @param timeStamp  
    * @param deviceUUID  
    * @return void
    */
    fun loginUser(timeStamp: java.math.BigDecimal, deviceUUID: kotlin.String) : Unit {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("timeStamp" to listOf("$timeStamp"), "deviceUUID" to listOf("$deviceUUID"))
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.DELETE,
            "/bmi/delete",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Unit>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

}
